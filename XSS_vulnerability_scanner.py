import requests
from pprint import pprint
from bs4 import BeautifulSoup as bs
from urllib.parse import urljoin


def get_all_forms(url):
    """ given a 'url' it returns all forms from the HTML content"""
    soup = bs(requests.get(url).content)
    return soup.find_all("form")

def get_form_details(form):
    """this function extracts all possible useful information about an HTML 'form'"""
    details = {}
    #get the form action (target url)
    action = form.attrs.get("action").lower()
    #get the form method (POST,GET e.t.c)
    method = form.attrs.get("method","get").lower()
    #get all the input details such as type and name e.t.c
    inputs = []
    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type","text")
        input_name = input_tag.attrs.get("name")
        inputs.append({"type":input_type ,"name":input_name })
    # put everything to the resulting dictionary
    details["action"]=action
    details["method"]=method
    details["inputs"]=inputs
    return details

def submit_form(form_details , url , value):
    """submits a form given in 'form_details'
    params:
        form_details(list): is a dictionary that contain form information >> which is output of get_form_details() function
        url(str): the original URL that contain that 'form'
        value(str):  this will be replaced to all text and search inputs
    returns the HTTP Response after form submission"""

    #construct full url (if the url provided in action is relative)
    target_url = urljoin(url,form_details["action"])
    #get the inputs
    inputs = form_details["inputs"]
    data = {}
    for input in inputs:
        #replace all text and search values with 'value'
        if input["type"] == "text" or input["type"]=="search":
            input["values"] = value
        input_name = input.get("name")
        input_value = input.get("value")
        if input_name and input_value:
            #if input_value and input_name aren't None
            #then add them to the data of form submission
            data[input_name] = input_value

    if form_details["method"]=="post":
        return requests.post(target_url,data=data)
    else:
        #GET request
        return requests.get(target_url , params = data)

def scan_xss(url):
    """Given a 'url' , it prints all XSS vulnerable forms and
    returns True if any is vulnerable ,  Otherwise False"""
    # get all the forms from the url
    forms = get_all_forms(url)
    print(f"[+] Detected {len(forms)} form on {url} .")
    js_script = "<script>alert('hi')</script>"
    #returning value
    is_vulnerable = False
    
    #iterate over all forms
    for form in forms:
        form_details = get_form_details(form)
        content = submit_form(form_details , url , js_script).content.decode()

        if js_script in content :
            print(f"[+] XSS detected on {url}")
            print(f"[+] Form details :")
            #won't break because we want to print available vulnerable forms
            pprint(form_details)
            is_vulnerable = True
    return is_vulnerable

if __name__ == "__main__":
    url = "https://xss-game-appspot.com/level1/frame"
    print(scan_xss(url))
